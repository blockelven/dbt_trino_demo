services:

  minio:
    hostname: minio
    image: 'minio/minio'
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - ./data/minio:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: server /data --console-address ":9001"
    networks:
      - allinone
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
  mc:
    image: minio/mc
    container_name: mc
    hostname: mc
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
    networks:
      - allinone
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minio123) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      exit 0;
      "    
    depends_on:
      minio:
        condition: service_healthy

  postgres:
    image: postgres
    hostname: postgres
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=ngods
      - POSTGRES_USER=ngods
      - POSTGRES_DB=ngods
      - POSTGRES_MULTIPLE_DATABASES=dagster_dev
    ports:
      - '5432:5432'
    networks:
      - allinone
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ngods"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./config/postgres/init_dbt_trino.sh:/docker-entrypoint-initdb.d/init_dbt_trino.sh

  trino:
    build: trino/
    container_name: trino
    volumes:
      - ./data/stage:/var/lib/ngods/stage
      - ./trino/certs/trino.pass:/trino.pass
      - ./trino/certs/trino_key_and_cert.pem:/trino_key_and_cert.pem
      - ./trino/certs/trino_key.pem:/trino_key.pem
      - ./trino/certs/trino_cert.pem:/trino_cert.pem
    ports:
      - '8060:8060' # Trino
      - '8063:8063' # Trino
    networks:
      - allinone
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000

  downtown:
    build:
      context: .
      dockerfile: downtown/Dockerfile

    environment:
      # prepare dbt mainfest
      - DAGSTER_IS_DEV_CLI=1
      - TRINO_HOST=trino
      - TRINO_PORT=8060
      - TRINO_USER=trino
      - TRINO_PASSWORD=
      - ICE_NAME=warehouse
      - ICE_CATALOG_URI=postgresql+psycopg2://ngods:ngods@postgres:5432/ngods
      - ICE_WH_PATH=s3://warehouse
      - ICE_S3_ENDPOINT=http://minio:9000
      - ICE_S3_AK=minio
      - ICE_S3_SK=minio123
      - PYICEBERG_DOWNCAST_NS_TIMESTAMP_TO_US_ON_WRITE=True
    ports:
      - '3070:3070'
    networks:
      - allinone
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

    volumes:
      - ./data/etl/jaffle_shop/target:/opt/dagster/etl/jaffle_shop/target
      - ./data/etl/jaffle_shop/log:/opt/dagster/etl/jaffle_shop/log
      - ./data/etl/jaffle_shop/dbt_modules:/opt/dagster/etl/jaffle_shop/dbt_modules
      - ./data/etl/stock/target:/opt/dagster/etl/stock/target
      - ./data/etl/stock/log:/opt/dagster/etl/stock/log
      - ./data/etl/stock/dbt_modules:/opt/dagster/etl/stock/dbt_modules
      - ./data/downtown/logs:/opt/dagster/dagster_home/logs/
      - ./data/downtown/storage:/opt/dagster/dagster_home/storage/
networks:
  allinone:
    driver: bridge
